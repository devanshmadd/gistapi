{"ast":null,"code":"const VERSION = \"2.13.3\";\n/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\n\nfunction normalizePaginatedListResponse(response) {\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response; // keep the additional properties intact as there is currently no other way\n  // to retrieve the same information.\n\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n\n  response.data.total_count = totalCount;\n  return response;\n}\n\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return {\n          done: true\n        };\n        const response = await requestMethod({\n          method,\n          url,\n          headers\n        });\n        const normalizedResponse = normalizePaginatedListResponse(response); // `response.headers.link` format:\n        // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n        // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n\n        url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n        return {\n          value: normalizedResponse\n        };\n      }\n\n    })\n  };\n}\n\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = undefined;\n  }\n\n  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\n\nfunction gather(octokit, results, iterator, mapFn) {\n  return iterator.next().then(result => {\n    if (result.done) {\n      return results;\n    }\n\n    let earlyExit = false;\n\n    function done() {\n      earlyExit = true;\n    }\n\n    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n\n    if (earlyExit) {\n      return results;\n    }\n\n    return gather(octokit, results, iterator, mapFn);\n  });\n}\n\nconst composePaginateRest = Object.assign(paginate, {\n  iterator\n});\nconst paginatingEndpoints = [\"GET /app/installations\", \"GET /applications/grants\", \"GET /authorizations\", \"GET /enterprises/{enterprise}/actions/permissions/organizations\", \"GET /enterprises/{enterprise}/actions/runner-groups\", \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\", \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\", \"GET /enterprises/{enterprise}/actions/runners\", \"GET /enterprises/{enterprise}/actions/runners/downloads\", \"GET /events\", \"GET /gists\", \"GET /gists/public\", \"GET /gists/starred\", \"GET /gists/{gist_id}/comments\", \"GET /gists/{gist_id}/commits\", \"GET /gists/{gist_id}/forks\", \"GET /installation/repositories\", \"GET /issues\", \"GET /marketplace_listing/plans\", \"GET /marketplace_listing/plans/{plan_id}/accounts\", \"GET /marketplace_listing/stubbed/plans\", \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\", \"GET /networks/{owner}/{repo}/events\", \"GET /notifications\", \"GET /organizations\", \"GET /orgs/{org}/actions/permissions/repositories\", \"GET /orgs/{org}/actions/runner-groups\", \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\", \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\", \"GET /orgs/{org}/actions/runners\", \"GET /orgs/{org}/actions/runners/downloads\", \"GET /orgs/{org}/actions/secrets\", \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\", \"GET /orgs/{org}/blocks\", \"GET /orgs/{org}/credential-authorizations\", \"GET /orgs/{org}/events\", \"GET /orgs/{org}/failed_invitations\", \"GET /orgs/{org}/hooks\", \"GET /orgs/{org}/installations\", \"GET /orgs/{org}/invitations\", \"GET /orgs/{org}/invitations/{invitation_id}/teams\", \"GET /orgs/{org}/issues\", \"GET /orgs/{org}/members\", \"GET /orgs/{org}/migrations\", \"GET /orgs/{org}/migrations/{migration_id}/repositories\", \"GET /orgs/{org}/outside_collaborators\", \"GET /orgs/{org}/projects\", \"GET /orgs/{org}/public_members\", \"GET /orgs/{org}/repos\", \"GET /orgs/{org}/team-sync/groups\", \"GET /orgs/{org}/teams\", \"GET /orgs/{org}/teams/{team_slug}/discussions\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\", \"GET /orgs/{org}/teams/{team_slug}/invitations\", \"GET /orgs/{org}/teams/{team_slug}/members\", \"GET /orgs/{org}/teams/{team_slug}/projects\", \"GET /orgs/{org}/teams/{team_slug}/repos\", \"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\", \"GET /orgs/{org}/teams/{team_slug}/teams\", \"GET /projects/columns/{column_id}/cards\", \"GET /projects/{project_id}/collaborators\", \"GET /projects/{project_id}/columns\", \"GET /repos/{owner}/{repo}/actions/artifacts\", \"GET /repos/{owner}/{repo}/actions/runners\", \"GET /repos/{owner}/{repo}/actions/runners/downloads\", \"GET /repos/{owner}/{repo}/actions/runs\", \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\", \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\", \"GET /repos/{owner}/{repo}/actions/secrets\", \"GET /repos/{owner}/{repo}/actions/workflows\", \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\", \"GET /repos/{owner}/{repo}/assignees\", \"GET /repos/{owner}/{repo}/branches\", \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\", \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\", \"GET /repos/{owner}/{repo}/code-scanning/alerts\", \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\", \"GET /repos/{owner}/{repo}/code-scanning/analyses\", \"GET /repos/{owner}/{repo}/collaborators\", \"GET /repos/{owner}/{repo}/comments\", \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/commits\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\", \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\", \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\", \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\", \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\", \"GET /repos/{owner}/{repo}/contributors\", \"GET /repos/{owner}/{repo}/deployments\", \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\", \"GET /repos/{owner}/{repo}/events\", \"GET /repos/{owner}/{repo}/forks\", \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\", \"GET /repos/{owner}/{repo}/hooks\", \"GET /repos/{owner}/{repo}/invitations\", \"GET /repos/{owner}/{repo}/issues\", \"GET /repos/{owner}/{repo}/issues/comments\", \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/issues/events\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\", \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\", \"GET /repos/{owner}/{repo}/keys\", \"GET /repos/{owner}/{repo}/labels\", \"GET /repos/{owner}/{repo}/milestones\", \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\", \"GET /repos/{owner}/{repo}/notifications\", \"GET /repos/{owner}/{repo}/pages/builds\", \"GET /repos/{owner}/{repo}/projects\", \"GET /repos/{owner}/{repo}/pulls\", \"GET /repos/{owner}/{repo}/pulls/comments\", \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\", \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\", \"GET /repos/{owner}/{repo}/releases\", \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\", \"GET /repos/{owner}/{repo}/secret-scanning/alerts\", \"GET /repos/{owner}/{repo}/stargazers\", \"GET /repos/{owner}/{repo}/subscribers\", \"GET /repos/{owner}/{repo}/tags\", \"GET /repos/{owner}/{repo}/teams\", \"GET /repositories\", \"GET /repositories/{repository_id}/environments/{environment_name}/secrets\", \"GET /scim/v2/enterprises/{enterprise}/Groups\", \"GET /scim/v2/enterprises/{enterprise}/Users\", \"GET /scim/v2/organizations/{org}/Users\", \"GET /search/code\", \"GET /search/commits\", \"GET /search/issues\", \"GET /search/labels\", \"GET /search/repositories\", \"GET /search/topics\", \"GET /search/users\", \"GET /teams/{team_id}/discussions\", \"GET /teams/{team_id}/discussions/{discussion_number}/comments\", \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\", \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\", \"GET /teams/{team_id}/invitations\", \"GET /teams/{team_id}/members\", \"GET /teams/{team_id}/projects\", \"GET /teams/{team_id}/repos\", \"GET /teams/{team_id}/team-sync/group-mappings\", \"GET /teams/{team_id}/teams\", \"GET /user/blocks\", \"GET /user/emails\", \"GET /user/followers\", \"GET /user/following\", \"GET /user/gpg_keys\", \"GET /user/installations\", \"GET /user/installations/{installation_id}/repositories\", \"GET /user/issues\", \"GET /user/keys\", \"GET /user/marketplace_purchases\", \"GET /user/marketplace_purchases/stubbed\", \"GET /user/memberships/orgs\", \"GET /user/migrations\", \"GET /user/migrations/{migration_id}/repositories\", \"GET /user/orgs\", \"GET /user/public_emails\", \"GET /user/repos\", \"GET /user/repository_invitations\", \"GET /user/starred\", \"GET /user/subscriptions\", \"GET /user/teams\", \"GET /users\", \"GET /users/{username}/events\", \"GET /users/{username}/events/orgs/{org}\", \"GET /users/{username}/events/public\", \"GET /users/{username}/followers\", \"GET /users/{username}/following\", \"GET /users/{username}/gists\", \"GET /users/{username}/gpg_keys\", \"GET /users/{username}/keys\", \"GET /users/{username}/orgs\", \"GET /users/{username}/projects\", \"GET /users/{username}/received_events\", \"GET /users/{username}/received_events/public\", \"GET /users/{username}/repos\", \"GET /users/{username}/starred\", \"GET /users/{username}/subscriptions\"];\n\nfunction isPaginatingEndpoint(arg) {\n  if (typeof arg === \"string\") {\n    return paginatingEndpoints.includes(arg);\n  } else {\n    return false;\n  }\n}\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\n\n\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\n\npaginateRest.VERSION = VERSION;\nexport { composePaginateRest, isPaginatingEndpoint, paginateRest, paginatingEndpoints };","map":{"version":3,"sources":["../dist-src/version.js","../dist-src/normalize-paginated-list-response.js","../dist-src/iterator.js","../dist-src/paginate.js","../dist-src/compose-paginate.js","../dist-src/generated/paginating-endpoints.js","../dist-src/paginating-endpoints.js","../dist-src/index.js"],"names":[],"mappings":"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","sourcesContent":["export const VERSION = \"2.13.3\";\n","/**\n * Some “list” response that can be paginated have a different response structure\n *\n * They have a `total_count` key in the response (search also has `incomplete_results`,\n * /installation/repositories also has `repository_selection`), as well as a key with\n * the list of the items which name varies from endpoint to endpoint.\n *\n * Octokit normalizes these responses so that paginated results are always returned following\n * the same structure. One challenge is that if the list response has only one page, no Link\n * header is provided, so this header alone is not sufficient to check wether a response is\n * paginated or not.\n *\n * We check if a \"total_count\" key is present in the response data, but also make sure that\n * a \"url\" property is not, as the \"Get the combined status for a specific ref\" endpoint would\n * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n */\nexport function normalizePaginatedListResponse(response) {\n    const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n    if (!responseNeedsNormalization)\n        return response;\n    // keep the additional properties intact as there is currently no other way\n    // to retrieve the same information.\n    const incompleteResults = response.data.incomplete_results;\n    const repositorySelection = response.data.repository_selection;\n    const totalCount = response.data.total_count;\n    delete response.data.incomplete_results;\n    delete response.data.repository_selection;\n    delete response.data.total_count;\n    const namespaceKey = Object.keys(response.data)[0];\n    const data = response.data[namespaceKey];\n    response.data = data;\n    if (typeof incompleteResults !== \"undefined\") {\n        response.data.incomplete_results = incompleteResults;\n    }\n    if (typeof repositorySelection !== \"undefined\") {\n        response.data.repository_selection = repositorySelection;\n    }\n    response.data.total_count = totalCount;\n    return response;\n}\n","import { normalizePaginatedListResponse } from \"./normalize-paginated-list-response\";\nexport function iterator(octokit, route, parameters) {\n    const options = typeof route === \"function\"\n        ? route.endpoint(parameters)\n        : octokit.request.endpoint(route, parameters);\n    const requestMethod = typeof route === \"function\" ? route : octokit.request;\n    const method = options.method;\n    const headers = options.headers;\n    let url = options.url;\n    return {\n        [Symbol.asyncIterator]: () => ({\n            async next() {\n                if (!url)\n                    return { done: true };\n                const response = await requestMethod({ method, url, headers });\n                const normalizedResponse = normalizePaginatedListResponse(response);\n                // `response.headers.link` format:\n                // '<https://api.github.com/users/aseemk/followers?page=2>; rel=\"next\", <https://api.github.com/users/aseemk/followers?page=2>; rel=\"last\"'\n                // sets `url` to undefined if \"next\" URL is not present or `link` header is not set\n                url = ((normalizedResponse.headers.link || \"\").match(/<([^>]+)>;\\s*rel=\"next\"/) || [])[1];\n                return { value: normalizedResponse };\n            },\n        }),\n    };\n}\n","import { iterator } from \"./iterator\";\nexport function paginate(octokit, route, parameters, mapFn) {\n    if (typeof parameters === \"function\") {\n        mapFn = parameters;\n        parameters = undefined;\n    }\n    return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);\n}\nfunction gather(octokit, results, iterator, mapFn) {\n    return iterator.next().then((result) => {\n        if (result.done) {\n            return results;\n        }\n        let earlyExit = false;\n        function done() {\n            earlyExit = true;\n        }\n        results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);\n        if (earlyExit) {\n            return results;\n        }\n        return gather(octokit, results, iterator, mapFn);\n    });\n}\n","import { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport const composePaginateRest = Object.assign(paginate, {\n    iterator,\n});\n","export const paginatingEndpoints = [\n    \"GET /app/installations\",\n    \"GET /applications/grants\",\n    \"GET /authorizations\",\n    \"GET /enterprises/{enterprise}/actions/permissions/organizations\",\n    \"GET /enterprises/{enterprise}/actions/runner-groups\",\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations\",\n    \"GET /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners\",\n    \"GET /enterprises/{enterprise}/actions/runners\",\n    \"GET /enterprises/{enterprise}/actions/runners/downloads\",\n    \"GET /events\",\n    \"GET /gists\",\n    \"GET /gists/public\",\n    \"GET /gists/starred\",\n    \"GET /gists/{gist_id}/comments\",\n    \"GET /gists/{gist_id}/commits\",\n    \"GET /gists/{gist_id}/forks\",\n    \"GET /installation/repositories\",\n    \"GET /issues\",\n    \"GET /marketplace_listing/plans\",\n    \"GET /marketplace_listing/plans/{plan_id}/accounts\",\n    \"GET /marketplace_listing/stubbed/plans\",\n    \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n    \"GET /networks/{owner}/{repo}/events\",\n    \"GET /notifications\",\n    \"GET /organizations\",\n    \"GET /orgs/{org}/actions/permissions/repositories\",\n    \"GET /orgs/{org}/actions/runner-groups\",\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\",\n    \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\",\n    \"GET /orgs/{org}/actions/runners\",\n    \"GET /orgs/{org}/actions/runners/downloads\",\n    \"GET /orgs/{org}/actions/secrets\",\n    \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n    \"GET /orgs/{org}/blocks\",\n    \"GET /orgs/{org}/credential-authorizations\",\n    \"GET /orgs/{org}/events\",\n    \"GET /orgs/{org}/failed_invitations\",\n    \"GET /orgs/{org}/hooks\",\n    \"GET /orgs/{org}/installations\",\n    \"GET /orgs/{org}/invitations\",\n    \"GET /orgs/{org}/invitations/{invitation_id}/teams\",\n    \"GET /orgs/{org}/issues\",\n    \"GET /orgs/{org}/members\",\n    \"GET /orgs/{org}/migrations\",\n    \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n    \"GET /orgs/{org}/outside_collaborators\",\n    \"GET /orgs/{org}/projects\",\n    \"GET /orgs/{org}/public_members\",\n    \"GET /orgs/{org}/repos\",\n    \"GET /orgs/{org}/team-sync/groups\",\n    \"GET /orgs/{org}/teams\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n    \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n    \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n    \"GET /orgs/{org}/teams/{team_slug}/members\",\n    \"GET /orgs/{org}/teams/{team_slug}/projects\",\n    \"GET /orgs/{org}/teams/{team_slug}/repos\",\n    \"GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings\",\n    \"GET /orgs/{org}/teams/{team_slug}/teams\",\n    \"GET /projects/columns/{column_id}/cards\",\n    \"GET /projects/{project_id}/collaborators\",\n    \"GET /projects/{project_id}/columns\",\n    \"GET /repos/{owner}/{repo}/actions/artifacts\",\n    \"GET /repos/{owner}/{repo}/actions/runners\",\n    \"GET /repos/{owner}/{repo}/actions/runners/downloads\",\n    \"GET /repos/{owner}/{repo}/actions/runs\",\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n    \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n    \"GET /repos/{owner}/{repo}/actions/secrets\",\n    \"GET /repos/{owner}/{repo}/actions/workflows\",\n    \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n    \"GET /repos/{owner}/{repo}/assignees\",\n    \"GET /repos/{owner}/{repo}/branches\",\n    \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n    \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts\",\n    \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n    \"GET /repos/{owner}/{repo}/code-scanning/analyses\",\n    \"GET /repos/{owner}/{repo}/collaborators\",\n    \"GET /repos/{owner}/{repo}/comments\",\n    \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/commits\",\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head\",\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n    \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\",\n    \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n    \"GET /repos/{owner}/{repo}/contributors\",\n    \"GET /repos/{owner}/{repo}/deployments\",\n    \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n    \"GET /repos/{owner}/{repo}/events\",\n    \"GET /repos/{owner}/{repo}/forks\",\n    \"GET /repos/{owner}/{repo}/git/matching-refs/{ref}\",\n    \"GET /repos/{owner}/{repo}/hooks\",\n    \"GET /repos/{owner}/{repo}/invitations\",\n    \"GET /repos/{owner}/{repo}/issues\",\n    \"GET /repos/{owner}/{repo}/issues/comments\",\n    \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/issues/events\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n    \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n    \"GET /repos/{owner}/{repo}/keys\",\n    \"GET /repos/{owner}/{repo}/labels\",\n    \"GET /repos/{owner}/{repo}/milestones\",\n    \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n    \"GET /repos/{owner}/{repo}/notifications\",\n    \"GET /repos/{owner}/{repo}/pages/builds\",\n    \"GET /repos/{owner}/{repo}/projects\",\n    \"GET /repos/{owner}/{repo}/pulls\",\n    \"GET /repos/{owner}/{repo}/pulls/comments\",\n    \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n    \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n    \"GET /repos/{owner}/{repo}/releases\",\n    \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n    \"GET /repos/{owner}/{repo}/secret-scanning/alerts\",\n    \"GET /repos/{owner}/{repo}/stargazers\",\n    \"GET /repos/{owner}/{repo}/subscribers\",\n    \"GET /repos/{owner}/{repo}/tags\",\n    \"GET /repos/{owner}/{repo}/teams\",\n    \"GET /repositories\",\n    \"GET /repositories/{repository_id}/environments/{environment_name}/secrets\",\n    \"GET /scim/v2/enterprises/{enterprise}/Groups\",\n    \"GET /scim/v2/enterprises/{enterprise}/Users\",\n    \"GET /scim/v2/organizations/{org}/Users\",\n    \"GET /search/code\",\n    \"GET /search/commits\",\n    \"GET /search/issues\",\n    \"GET /search/labels\",\n    \"GET /search/repositories\",\n    \"GET /search/topics\",\n    \"GET /search/users\",\n    \"GET /teams/{team_id}/discussions\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n    \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\",\n    \"GET /teams/{team_id}/invitations\",\n    \"GET /teams/{team_id}/members\",\n    \"GET /teams/{team_id}/projects\",\n    \"GET /teams/{team_id}/repos\",\n    \"GET /teams/{team_id}/team-sync/group-mappings\",\n    \"GET /teams/{team_id}/teams\",\n    \"GET /user/blocks\",\n    \"GET /user/emails\",\n    \"GET /user/followers\",\n    \"GET /user/following\",\n    \"GET /user/gpg_keys\",\n    \"GET /user/installations\",\n    \"GET /user/installations/{installation_id}/repositories\",\n    \"GET /user/issues\",\n    \"GET /user/keys\",\n    \"GET /user/marketplace_purchases\",\n    \"GET /user/marketplace_purchases/stubbed\",\n    \"GET /user/memberships/orgs\",\n    \"GET /user/migrations\",\n    \"GET /user/migrations/{migration_id}/repositories\",\n    \"GET /user/orgs\",\n    \"GET /user/public_emails\",\n    \"GET /user/repos\",\n    \"GET /user/repository_invitations\",\n    \"GET /user/starred\",\n    \"GET /user/subscriptions\",\n    \"GET /user/teams\",\n    \"GET /users\",\n    \"GET /users/{username}/events\",\n    \"GET /users/{username}/events/orgs/{org}\",\n    \"GET /users/{username}/events/public\",\n    \"GET /users/{username}/followers\",\n    \"GET /users/{username}/following\",\n    \"GET /users/{username}/gists\",\n    \"GET /users/{username}/gpg_keys\",\n    \"GET /users/{username}/keys\",\n    \"GET /users/{username}/orgs\",\n    \"GET /users/{username}/projects\",\n    \"GET /users/{username}/received_events\",\n    \"GET /users/{username}/received_events/public\",\n    \"GET /users/{username}/repos\",\n    \"GET /users/{username}/starred\",\n    \"GET /users/{username}/subscriptions\",\n];\n","import { paginatingEndpoints, } from \"./generated/paginating-endpoints\";\nexport { paginatingEndpoints } from \"./generated/paginating-endpoints\";\nexport function isPaginatingEndpoint(arg) {\n    if (typeof arg === \"string\") {\n        return paginatingEndpoints.includes(arg);\n    }\n    else {\n        return false;\n    }\n}\n","import { VERSION } from \"./version\";\nimport { paginate } from \"./paginate\";\nimport { iterator } from \"./iterator\";\nexport { composePaginateRest } from \"./compose-paginate\";\nexport { isPaginatingEndpoint, paginatingEndpoints, } from \"./paginating-endpoints\";\n/**\n * @param octokit Octokit instance\n * @param options Options passed to Octokit constructor\n */\nexport function paginateRest(octokit) {\n    return {\n        paginate: Object.assign(paginate.bind(null, octokit), {\n            iterator: iterator.bind(null, octokit),\n        }),\n    };\n}\npaginateRest.VERSION = VERSION;\n"]},"metadata":{},"sourceType":"module"}